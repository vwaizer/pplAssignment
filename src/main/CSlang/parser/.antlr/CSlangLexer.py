# Generated from d:/y4_hk1/ppl/assignment2-initial/assignment2-initial/src/main/CSlang/parser/CSlang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,63,448,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,
        1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,
        1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,
        1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,
        12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,
        14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,
        20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,
        23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,
        30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,
        35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,
        40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,
        45,1,45,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,
        48,1,49,4,49,314,8,49,11,49,12,49,315,1,50,1,50,4,50,320,8,50,11,
        50,12,50,321,1,51,1,51,3,51,326,8,51,1,51,4,51,329,8,51,11,51,12,
        51,330,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,343,
        8,52,1,53,1,53,3,53,347,8,53,1,54,1,54,1,54,1,54,1,54,1,55,1,55,
        1,55,1,55,1,55,1,55,1,56,1,56,5,56,362,8,56,10,56,12,56,365,9,56,
        1,57,1,57,3,57,369,8,57,1,58,1,58,1,58,1,59,1,59,1,59,1,59,5,59,
        378,8,59,10,59,12,59,381,9,59,1,59,5,59,384,8,59,10,59,12,59,387,
        9,59,1,59,1,59,1,59,1,60,4,60,393,8,60,11,60,12,60,394,1,60,1,60,
        1,61,1,61,1,61,1,61,5,61,403,8,61,10,61,12,61,406,9,61,1,61,1,61,
        1,61,1,61,1,61,1,62,1,62,1,62,1,62,5,62,417,8,62,10,62,12,62,420,
        9,62,1,62,1,62,1,63,1,63,1,63,1,64,4,64,428,8,64,11,64,12,64,429,
        1,65,1,65,1,65,1,65,1,66,1,66,5,66,438,8,66,10,66,12,66,441,9,66,
        1,66,1,66,1,66,1,67,1,67,1,67,1,404,0,68,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,
        101,0,103,0,105,51,107,52,109,53,111,54,113,55,115,0,117,0,119,56,
        121,57,123,58,125,59,127,0,129,60,131,61,133,62,135,63,1,0,13,1,
        0,92,92,1,0,48,57,1,0,46,46,2,0,69,69,101,101,2,0,43,43,45,45,1,
        0,49,57,3,0,8,10,12,13,92,92,7,0,39,39,92,92,98,98,102,102,110,110,
        114,114,116,116,1,0,34,34,3,0,9,10,13,13,32,32,2,0,10,10,13,13,6,
        0,92,92,98,98,102,102,110,110,114,114,116,116,4,0,48,57,65,90,95,
        95,97,122,459,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
        9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
        19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
        29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,
        39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,
        49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,
        59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,
        69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,
        79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,
        89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,
        99,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,
        0,0,113,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,
        1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,
        1,137,1,0,0,0,3,142,1,0,0,0,5,147,1,0,0,0,7,158,1,0,0,0,9,161,1,
        0,0,0,11,166,1,0,0,0,13,170,1,0,0,0,15,179,1,0,0,0,17,185,1,0,0,
        0,19,192,1,0,0,0,21,197,1,0,0,0,23,202,1,0,0,0,25,206,1,0,0,0,27,
        212,1,0,0,0,29,216,1,0,0,0,31,222,1,0,0,0,33,224,1,0,0,0,35,226,
        1,0,0,0,37,228,1,0,0,0,39,230,1,0,0,0,41,233,1,0,0,0,43,235,1,0,
        0,0,45,237,1,0,0,0,47,241,1,0,0,0,49,247,1,0,0,0,51,249,1,0,0,0,
        53,251,1,0,0,0,55,253,1,0,0,0,57,255,1,0,0,0,59,257,1,0,0,0,61,259,
        1,0,0,0,63,262,1,0,0,0,65,265,1,0,0,0,67,267,1,0,0,0,69,269,1,0,
        0,0,71,272,1,0,0,0,73,275,1,0,0,0,75,278,1,0,0,0,77,281,1,0,0,0,
        79,283,1,0,0,0,81,285,1,0,0,0,83,287,1,0,0,0,85,289,1,0,0,0,87,291,
        1,0,0,0,89,293,1,0,0,0,91,295,1,0,0,0,93,300,1,0,0,0,95,302,1,0,
        0,0,97,309,1,0,0,0,99,313,1,0,0,0,101,317,1,0,0,0,103,323,1,0,0,
        0,105,342,1,0,0,0,107,346,1,0,0,0,109,348,1,0,0,0,111,353,1,0,0,
        0,113,359,1,0,0,0,115,368,1,0,0,0,117,370,1,0,0,0,119,373,1,0,0,
        0,121,392,1,0,0,0,123,398,1,0,0,0,125,412,1,0,0,0,127,423,1,0,0,
        0,129,427,1,0,0,0,131,431,1,0,0,0,133,435,1,0,0,0,135,445,1,0,0,
        0,137,138,5,110,0,0,138,139,5,117,0,0,139,140,5,108,0,0,140,141,
        5,108,0,0,141,2,1,0,0,0,142,143,5,115,0,0,143,144,5,101,0,0,144,
        145,5,108,0,0,145,146,5,102,0,0,146,4,1,0,0,0,147,148,5,99,0,0,148,
        149,5,111,0,0,149,150,5,110,0,0,150,151,5,116,0,0,151,152,5,114,
        0,0,152,153,5,117,0,0,153,154,5,99,0,0,154,155,5,116,0,0,155,156,
        5,111,0,0,156,157,5,114,0,0,157,6,1,0,0,0,158,159,5,105,0,0,159,
        160,5,102,0,0,160,8,1,0,0,0,161,162,5,101,0,0,162,163,5,108,0,0,
        163,164,5,115,0,0,164,165,5,101,0,0,165,10,1,0,0,0,166,167,5,102,
        0,0,167,168,5,111,0,0,168,169,5,114,0,0,169,12,1,0,0,0,170,171,5,
        99,0,0,171,172,5,111,0,0,172,173,5,110,0,0,173,174,5,116,0,0,174,
        175,5,105,0,0,175,176,5,110,0,0,176,177,5,117,0,0,177,178,5,101,
        0,0,178,14,1,0,0,0,179,180,5,98,0,0,180,181,5,114,0,0,181,182,5,
        101,0,0,182,183,5,97,0,0,183,184,5,107,0,0,184,16,1,0,0,0,185,186,
        5,114,0,0,186,187,5,101,0,0,187,188,5,116,0,0,188,189,5,117,0,0,
        189,190,5,114,0,0,190,191,5,110,0,0,191,18,1,0,0,0,192,193,5,118,
        0,0,193,194,5,111,0,0,194,195,5,105,0,0,195,196,5,100,0,0,196,20,
        1,0,0,0,197,198,5,102,0,0,198,199,5,117,0,0,199,200,5,110,0,0,200,
        201,5,99,0,0,201,22,1,0,0,0,202,203,5,110,0,0,203,204,5,101,0,0,
        204,205,5,119,0,0,205,24,1,0,0,0,206,207,5,99,0,0,207,208,5,111,
        0,0,208,209,5,110,0,0,209,210,5,115,0,0,210,211,5,116,0,0,211,26,
        1,0,0,0,212,213,5,118,0,0,213,214,5,97,0,0,214,215,5,114,0,0,215,
        28,1,0,0,0,216,217,5,99,0,0,217,218,5,108,0,0,218,219,5,97,0,0,219,
        220,5,115,0,0,220,221,5,115,0,0,221,30,1,0,0,0,222,223,5,123,0,0,
        223,32,1,0,0,0,224,225,5,125,0,0,225,34,1,0,0,0,226,227,5,59,0,0,
        227,36,1,0,0,0,228,229,5,58,0,0,229,38,1,0,0,0,230,231,5,60,0,0,
        231,232,5,45,0,0,232,40,1,0,0,0,233,234,5,61,0,0,234,42,1,0,0,0,
        235,236,5,44,0,0,236,44,1,0,0,0,237,238,5,105,0,0,238,239,5,110,
        0,0,239,240,5,116,0,0,240,46,1,0,0,0,241,242,5,102,0,0,242,243,5,
        108,0,0,243,244,5,111,0,0,244,245,5,97,0,0,245,246,5,116,0,0,246,
        48,1,0,0,0,247,248,5,64,0,0,248,50,1,0,0,0,249,250,5,41,0,0,250,
        52,1,0,0,0,251,252,5,40,0,0,252,54,1,0,0,0,253,254,5,91,0,0,254,
        56,1,0,0,0,255,256,5,93,0,0,256,58,1,0,0,0,257,258,5,94,0,0,258,
        60,1,0,0,0,259,260,5,61,0,0,260,261,5,61,0,0,261,62,1,0,0,0,262,
        263,5,33,0,0,263,264,5,61,0,0,264,64,1,0,0,0,265,266,5,60,0,0,266,
        66,1,0,0,0,267,268,5,62,0,0,268,68,1,0,0,0,269,270,5,60,0,0,270,
        271,5,61,0,0,271,70,1,0,0,0,272,273,5,62,0,0,273,274,5,61,0,0,274,
        72,1,0,0,0,275,276,5,38,0,0,276,277,5,38,0,0,277,74,1,0,0,0,278,
        279,5,124,0,0,279,280,5,124,0,0,280,76,1,0,0,0,281,282,5,43,0,0,
        282,78,1,0,0,0,283,284,5,45,0,0,284,80,1,0,0,0,285,286,5,42,0,0,
        286,82,1,0,0,0,287,288,5,47,0,0,288,84,1,0,0,0,289,290,5,33,0,0,
        290,86,1,0,0,0,291,292,7,0,0,0,292,88,1,0,0,0,293,294,5,37,0,0,294,
        90,1,0,0,0,295,296,5,98,0,0,296,297,5,111,0,0,297,298,5,111,0,0,
        298,299,5,108,0,0,299,92,1,0,0,0,300,301,5,46,0,0,301,94,1,0,0,0,
        302,303,5,115,0,0,303,304,5,116,0,0,304,305,5,114,0,0,305,306,5,
        105,0,0,306,307,5,110,0,0,307,308,5,103,0,0,308,96,1,0,0,0,309,310,
        5,58,0,0,310,311,5,61,0,0,311,98,1,0,0,0,312,314,7,1,0,0,313,312,
        1,0,0,0,314,315,1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,100,
        1,0,0,0,317,319,7,2,0,0,318,320,7,1,0,0,319,318,1,0,0,0,320,321,
        1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,102,1,0,0,0,323,325,
        7,3,0,0,324,326,7,4,0,0,325,324,1,0,0,0,325,326,1,0,0,0,326,328,
        1,0,0,0,327,329,7,1,0,0,328,327,1,0,0,0,329,330,1,0,0,0,330,328,
        1,0,0,0,330,331,1,0,0,0,331,104,1,0,0,0,332,333,3,99,49,0,333,334,
        3,101,50,0,334,335,3,103,51,0,335,343,1,0,0,0,336,337,3,99,49,0,
        337,338,3,103,51,0,338,343,1,0,0,0,339,340,3,99,49,0,340,341,3,101,
        50,0,341,343,1,0,0,0,342,332,1,0,0,0,342,336,1,0,0,0,342,339,1,0,
        0,0,343,106,1,0,0,0,344,347,3,109,54,0,345,347,3,111,55,0,346,344,
        1,0,0,0,346,345,1,0,0,0,347,108,1,0,0,0,348,349,5,116,0,0,349,350,
        5,114,0,0,350,351,5,117,0,0,351,352,5,101,0,0,352,110,1,0,0,0,353,
        354,5,102,0,0,354,355,5,97,0,0,355,356,5,108,0,0,356,357,5,115,0,
        0,357,358,5,101,0,0,358,112,1,0,0,0,359,363,7,5,0,0,360,362,7,1,
        0,0,361,360,1,0,0,0,362,365,1,0,0,0,363,361,1,0,0,0,363,364,1,0,
        0,0,364,114,1,0,0,0,365,363,1,0,0,0,366,369,8,6,0,0,367,369,5,92,
        0,0,368,366,1,0,0,0,368,367,1,0,0,0,369,116,1,0,0,0,370,371,5,92,
        0,0,371,372,7,7,0,0,372,118,1,0,0,0,373,385,5,34,0,0,374,384,3,115,
        57,0,375,379,7,8,0,0,376,378,3,115,57,0,377,376,1,0,0,0,378,381,
        1,0,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,382,1,0,0,0,381,379,
        1,0,0,0,382,384,7,8,0,0,383,374,1,0,0,0,383,375,1,0,0,0,384,387,
        1,0,0,0,385,383,1,0,0,0,385,386,1,0,0,0,386,388,1,0,0,0,387,385,
        1,0,0,0,388,389,5,34,0,0,389,390,6,59,0,0,390,120,1,0,0,0,391,393,
        7,9,0,0,392,391,1,0,0,0,393,394,1,0,0,0,394,392,1,0,0,0,394,395,
        1,0,0,0,395,396,1,0,0,0,396,397,6,60,1,0,397,122,1,0,0,0,398,399,
        5,47,0,0,399,400,5,42,0,0,400,404,1,0,0,0,401,403,9,0,0,0,402,401,
        1,0,0,0,403,406,1,0,0,0,404,405,1,0,0,0,404,402,1,0,0,0,405,407,
        1,0,0,0,406,404,1,0,0,0,407,408,5,42,0,0,408,409,5,47,0,0,409,410,
        1,0,0,0,410,411,6,61,1,0,411,124,1,0,0,0,412,413,5,47,0,0,413,414,
        5,47,0,0,414,418,1,0,0,0,415,417,8,10,0,0,416,415,1,0,0,0,417,420,
        1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,421,1,0,0,0,420,418,
        1,0,0,0,421,422,6,62,1,0,422,126,1,0,0,0,423,424,5,92,0,0,424,425,
        7,11,0,0,425,128,1,0,0,0,426,428,7,12,0,0,427,426,1,0,0,0,428,429,
        1,0,0,0,429,427,1,0,0,0,429,430,1,0,0,0,430,130,1,0,0,0,431,432,
        5,34,0,0,432,433,5,0,0,1,433,434,6,65,2,0,434,132,1,0,0,0,435,439,
        5,34,0,0,436,438,3,115,57,0,437,436,1,0,0,0,438,441,1,0,0,0,439,
        437,1,0,0,0,439,440,1,0,0,0,440,442,1,0,0,0,441,439,1,0,0,0,442,
        443,3,127,63,0,443,444,6,66,3,0,444,134,1,0,0,0,445,446,9,0,0,0,
        446,447,6,67,4,0,447,136,1,0,0,0,17,0,315,321,325,330,342,346,363,
        368,379,383,385,394,404,418,429,439,5,1,59,0,6,0,0,1,65,1,1,66,2,
        1,67,3
    ]

class CSlangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NULL = 1
    SELF = 2
    CONTRUCTOR = 3
    IF = 4
    ELSE = 5
    FOR = 6
    CONTINUE = 7
    BREAK = 8
    RETURN = 9
    VOID = 10
    FUNCTION = 11
    NEW = 12
    CONST = 13
    VAR = 14
    CLASS = 15
    LCB = 16
    RCB = 17
    SEMI = 18
    COLON = 19
    RARROW = 20
    EQUAL = 21
    COMMA = 22
    INT = 23
    FLOAT = 24
    SIGN = 25
    RB = 26
    LB = 27
    LSB = 28
    RSB = 29
    STRING_OP = 30
    EQ_OP = 31
    NEQ_OP = 32
    LT_OP = 33
    GT_OP = 34
    LEQ_OP = 35
    GEQ_OP = 36
    AND_OP = 37
    OR_OP = 38
    ADD_OP = 39
    SUB_OP = 40
    MUL_OP = 41
    F_DIV_OP = 42
    NOT_OP = 43
    I_DIV_OP = 44
    REM_OP = 45
    BOOL = 46
    DOT = 47
    STRING = 48
    ASSGIN_OP = 49
    INTLIT = 50
    FLOATLIT = 51
    BOOLLIT = 52
    TRUE = 53
    FALSE = 54
    DIM = 55
    STRINGLIT = 56
    WS = 57
    C_COMMENT = 58
    CPP_COMMENT = 59
    ID = 60
    UNCLOSE_STRING = 61
    ILLEGAL_ESCAPE = 62
    ERROR_CHAR = 63

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'null'", "'self'", "'contructor'", "'if'", "'else'", "'for'", 
            "'continue'", "'break'", "'return'", "'void'", "'func'", "'new'", 
            "'const'", "'var'", "'class'", "'{'", "'}'", "';'", "':'", "'<-'", 
            "'='", "','", "'int'", "'float'", "'@'", "')'", "'('", "'['", 
            "']'", "'^'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", 
            "'&&'", "'||'", "'+'", "'-'", "'*'", "'/'", "'!'", "'%'", "'bool'", 
            "'.'", "'string'", "':='", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "NULL", "SELF", "CONTRUCTOR", "IF", "ELSE", "FOR", "CONTINUE", 
            "BREAK", "RETURN", "VOID", "FUNCTION", "NEW", "CONST", "VAR", 
            "CLASS", "LCB", "RCB", "SEMI", "COLON", "RARROW", "EQUAL", "COMMA", 
            "INT", "FLOAT", "SIGN", "RB", "LB", "LSB", "RSB", "STRING_OP", 
            "EQ_OP", "NEQ_OP", "LT_OP", "GT_OP", "LEQ_OP", "GEQ_OP", "AND_OP", 
            "OR_OP", "ADD_OP", "SUB_OP", "MUL_OP", "F_DIV_OP", "NOT_OP", 
            "I_DIV_OP", "REM_OP", "BOOL", "DOT", "STRING", "ASSGIN_OP", 
            "INTLIT", "FLOATLIT", "BOOLLIT", "TRUE", "FALSE", "DIM", "STRINGLIT", 
            "WS", "C_COMMENT", "CPP_COMMENT", "ID", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", 
            "ERROR_CHAR" ]

    ruleNames = [ "NULL", "SELF", "CONTRUCTOR", "IF", "ELSE", "FOR", "CONTINUE", 
                  "BREAK", "RETURN", "VOID", "FUNCTION", "NEW", "CONST", 
                  "VAR", "CLASS", "LCB", "RCB", "SEMI", "COLON", "RARROW", 
                  "EQUAL", "COMMA", "INT", "FLOAT", "SIGN", "RB", "LB", 
                  "LSB", "RSB", "STRING_OP", "EQ_OP", "NEQ_OP", "LT_OP", 
                  "GT_OP", "LEQ_OP", "GEQ_OP", "AND_OP", "OR_OP", "ADD_OP", 
                  "SUB_OP", "MUL_OP", "F_DIV_OP", "NOT_OP", "I_DIV_OP", 
                  "REM_OP", "BOOL", "DOT", "STRING", "ASSGIN_OP", "INTLIT", 
                  "DecimalPart", "ExponentPart", "FLOATLIT", "BOOLLIT", 
                  "TRUE", "FALSE", "DIM", "STR_CHAR", "ESC_SEQ", "STRINGLIT", 
                  "WS", "C_COMMENT", "CPP_COMMENT", "ESC_ILLEGAL", "ID", 
                  "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    grammarFileName = "CSlang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[59] = self.STRINGLIT_action 
            actions[65] = self.UNCLOSE_STRING_action 
            actions[66] = self.ILLEGAL_ESCAPE_action 
            actions[67] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRINGLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
             raise UncloseString(self.text[1:])
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
             raise IllegalEscape(self.text[1:] )
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
             raise ErrorToken(self.text) 
     


